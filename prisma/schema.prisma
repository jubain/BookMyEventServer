// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }
datasource db {
  provider = "mysql"
  url      = env("TEST_DATABASE_URL")
}

enum Role {
  OWNER
  CUSTOMER
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  name          String
  role          Role            @default(CUSTOMER)
  phone         Int
  password      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  venues        Venue[]
  events        Event[]
  VenueBookings VenueBookings[]
  EventBooking  EventBooking[]
  VenueReview   VenueReview[]
  EventReview   EventReview[]
  SavedEvent    SavedEvent[]
  SavedVenue    SavedVenue[]
}

model Venue {
  id            Int             @id @default(autoincrement())
  name          String
  description   String
  price         Float
  address1      String
  address2      String?
  city          String
  postcode      String
  country       String
  toilets       Int
  chairs        Int
  tables        Int
  wifi          Boolean         @default(true)
  kitchens      Int
  User          User?           @relation(fields: [userId], references: [id])
  userId        Int?
  coverImage    String
  images        Json
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  VenueBookings VenueBookings[]
  Event         Event[]
  VenueReview   VenueReview[]
  SavedVenue    SavedVenue[]
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  tickets     Int
  price       Float
  coverImage  String
  date        DateTime
  Venue       Venue    @relation(fields: [venueId], references: [id])
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?

  venueId      Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  EventReview  EventReview[]
  SavedEvent   SavedEvent[]
  EventBooking EventBooking[]
}

model VenueBookings {
  User   User @relation(fields: [userId], references: [id])
  userId Int

  Venue   Venue    @relation(fields: [venueId], references: [id])
  venueId Int
  Date    DateTime

  @@unique([userId, venueId])
}

model EventBooking {
  User    User     @relation(fields: [userId], references: [id])
  userId  Int
  Event   Event    @relation(fields: [eventId], references: [id])
  Date    DateTime
  tickets Int
  price   Float
  eventId Int

  @@unique([userId, eventId])
}

model VenueReview {
  id      Int   @id @default(autoincrement())
  Venue   Venue @relation(fields: [venueId], references: [id])
  venueId Int
  User    User  @relation(fields: [userId], references: [id])

  review    String
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventReview {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  Event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  review    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SavedEvent {
  User   User @relation(fields: [userId], references: [id])
  userId Int

  Event   Event @relation(fields: [eventId], references: [id])
  eventId Int

  @@unique([userId, eventId])
}

model SavedVenue {
  User   User @relation(fields: [userId], references: [id])
  userId Int

  Venue   Venue @relation(fields: [venueId], references: [id])
  venueId Int

  @@unique([userId, venueId])
}
