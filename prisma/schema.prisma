// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }
datasource db {
  provider = "mysql"
  // url      = env("TEST_DATABASE_URL")
  url      = "mysql://root:password@127.0.0.1:3306/BookMyEvent?schema=public"
  // url      = "mysql://admin:Password@jubeen.cchhvhstv5i8.us-east-1.rds.amazonaws.com:3306/BookMyEvent"
}

enum Role {
  OWNER
  CUSTOMER
}

enum Environment {
  INDOOR
  OUTDOOR
}

enum Wifi {
  YES
  NO
}

enum Venue_Type {
  ANY
  WEDDING
  CONVENTION
  SOCIAL
  NETWORKING
  CORPORATE
  FESTIVAL
  FASHION
  CLUB
}

enum Event_Type {
  SPORTS
  CHILDREN
  ADULT
  CARS
  MOTOBIKE
  GAME
  TECHNOLOGY
}

enum Image_Type {
  COVER
  EXTRA
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  name          String
  role          Role            @default(CUSTOMER)
  phone         BigInt
  password      String
  image         String?
  imageKey      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  venues        Venue[]
  events        Event[]
  VenueBookings VenueBookings[]
  EventBooking  EventBooking[]
  VenueReview   VenueReview[]
  EventReview   EventReview[]
  SavedEvent    SavedEvent[]
  SavedVenue    SavedVenue[]
}

model Venue {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  price         Float
  address1      String
  address2      String?
  city          String
  postcode      String
  country       String
  website       String?
  people        Int
  toilets       Int
  chairs        Int
  tables        Int
  wifi          Wifi
  kitchens      Int
  User          User?           @relation(fields: [userId], references: [id])
  userId        Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  VenueBookings VenueBookings[]
  Event         Event[]
  VenueReview   VenueReview[]
  SavedVenue    SavedVenue[]
  environment   Environment
  latitude      Float           @unique
  longitude     Float           @unique
  VenueType     VenueType[]
  VenueImages   VenueImages[]
}

model VenueImages {
  id      Int    @id @default(autoincrement())
  url     String
  Venue   Venue? @relation(fields: [venueId], references: [id], onDelete: Cascade)
  type    String
  key     String
  venueId Int?
}

model Type {
  id        Int         @id @default(autoincrement())
  name      Venue_Type  @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  VenueType VenueType[]
}

model VenueType {
  Venue   Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId Int

  Type   Type @relation(fields: [typeId], references: [id], onDelete: Cascade)
  typeId Int

  assignedAt DateTime @default(now())

  @@id([venueId, typeId])
}

model Event {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  tickets      Int
  price        Float
  startDate    DateTime
  startTime    String
  endDate      DateTime
  endTime      String
  Venue        Venue          @relation(fields: [venueId], references: [id])
  User         User?          @relation(fields: [userId], references: [id])
  userId       Int?
  venueId      Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  EventReview  EventReview[]
  SavedEvent   SavedEvent[]
  EventBooking EventBooking[]
  eventsImages EventImages[]
  EventType    EventType[]
}

model TypeEvent {
  id        Int         @id @default(autoincrement())
  name      Event_Type  @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  EventType EventType[]
}

model EventType {
  Event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int

  TypeEvent   TypeEvent @relation(fields: [typeEventId], references: [id], onDelete: Cascade)
  typeEventId Int

  @@id([eventId, typeEventId])
}

model EventImages {
  id      Int    @id @default(autoincrement())
  Event   Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int?
  url     String
  type    String
  key     String

  @@unique([eventId])
}

model VenueBookings {
  id     Int  @id @default(autoincrement())
  User   User @relation(fields: [userId], references: [id])
  userId Int

  Venue         Venue    @relation(fields: [venueId], references: [id])
  venueId       Int
  startDate     DateTime
  endDate       DateTime
  price         Float    @default(50)
  requestCancel Boolean  @default(false)
}

model EventBooking {
  id      Int   @id @default(autoincrement())
  User    User  @relation(fields: [userId], references: [id])
  userId  Int
  Event   Event @relation(fields: [eventId], references: [id])
  tickets Int
  price   Float
  eventId Int

  @@unique([id])
}

model VenueReview {
  id      Int   @id @default(autoincrement())
  Venue   Venue @relation(fields: [venueId], references: [id])
  venueId Int
  User    User  @relation(fields: [userId], references: [id])

  review    String
  rating    Int      @default(1)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventReview {
  id        Int      @id @default(autoincrement())
  User      User     @relation(fields: [userId], references: [id])
  userId    Int
  Event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  review    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SavedEvent {
  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  Event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId Int

  @@unique([userId, eventId])
}

model SavedVenue {
  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  Venue   Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId Int

  @@unique([userId, venueId])
}

model Room {
  id      Int       @id @default(autoincrement())
  user1   Int
  user2   Int
  Message Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id       Int    @id @default(autoincrement())
  room     Room   @relation(fields: [roomId], references: [id])
  roomId   Int
  senderId Int
  message  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
